#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "LinkedList.h"

//Initialize the linked list
void llist_init(LinkedList * list)
{
        list->head = NULL;
}

// Prints the linked list
void llist_print(LinkedList * list) {
        
        ListNode * e;

        if (list->head == NULL) {
                printf("{EMPTY}\n");
                return;
        }

        printf("{");

        e = list->head;
        while (e != NULL) {
                printf("%d", e->value);
                e = e->next;
                if (e!=NULL) {
                        printf(", ");
                }
        }
        printf("}\n");
}

// Problem ( 1/4 ) 
/******************************************************************************
 * TODO: Return the number of elements (ListNodes) in the linked list.
 *
 * Parameters: list -- find the number of elements contained in this single
 * linked list
 *
 * Return: the number of elements 
 *
 * Return Type: integer
 *****************************************************************************/
int llist_number_elements(LinkedList * list) {
    // Write Your Code Here
  int counter = 0;
  ListNode * e;
  if(list->head == NULL){
    printf("Error");
    exit(0);
  }
  e = list->head;
  while(e!=NULL){
    e = e->next;
    counter++;
  }
  return counter;
}

// Problem ( 2/4 ) 
/******************************************************************************
 * TODO: Create a new ListNode and add it to the end of the single linked
 * 	 list. There is no check if the value exists in the list. 
 *
 * Parameters: list -- The single linked list to which you will insert the new
 * 		       ListNode to the end of.
 *             value -- The new ListNode will contain this value.
 *
 * Return: void
 * 
 * Return Type: void
 *****************************************************************************/
void llist_insert_last(LinkedList * list, int value) {
    // Write Your Code Here
  ListNode * a;
  a = list->head;

  if(list==NULL){
    printf("error");
  }

  if(list->head==NULL){
    ListNode * b = (ListNode *)  malloc(sizeof(ListNode));
    b->value = value;
    b->next = NULL;
    list->head = b;
    return;
  }

  while(a->next != NULL){
    a = a->next;
  }
  ListNode * b = (ListNode *)  malloc(sizeof(ListNode));
  b->value = value;
  b->next = NULL;

  a->next = b;
  
}

// Problem ( 3/4 )
/******************************************************************************
 * TODO: Remove the ith entry from the single linked list.   	 
 * 
 * Parameters: list -- The single linked list to which you will be removing
 * 		       the listNode from.
 * 	       ith -- The index where you will remove the listNode from the
 * 	              single linked list. 
 *
 * Return: Return 1 if the ListNode is removed.
 * 	   Return 0 if the ith entry does not exist in the list or the list is
 * 	   empty.
 *
 * Return Type: integer
 *****************************************************************************/
int llist_remove_ith(LinkedList * list, int ith) {
    // Write Your Code Here
  ListNode * a;
  ListNode * previous;
  if(list->head == NULL){
    return 0;
  }
  a = list->head;
  int counter = 0;
  while(a != NULL && counter < ith - 1){
    a = a->next;
    counter ++;
  }
  if(counter == ith - 1){
    previous = a->next;
    a->next = a->next->next;
    free(previous);
    return 1;
  }
  return 0;
}

// Problem ( 4/4 )
/******************************************************************************
 * TODO: Iterate through list1 and list2. Check if any values intersect between
 *       the two lists. If the values match, add the intersecting elements
 *       to list3. Use the function llist_add(LinkedList * list, int value)
 *       to add a value to the list.
 * 
 * Parameters: list1 -- singled linked list, find values that intersect with
 *                      list2
 *             list2 -- single linked list, find values that intersect with
 *                      list1
 *             list3 -- store the intersection of list1 and list2 in this list
 *
 * Return: void 
 *
 * Return Type: void
 *****************************************************************************/
void llist_intersection(LinkedList * list1, LinkedList * list2,
	LinkedList * list3) {
    // Write Your Code Here
  ListNode * a;
  a = list1->head;

  ListNode * b;
  b = list2->head;

  
  while(a!=NULL){
    while(b!=NULL){
      if(a->value==b->value){
	llist_add(list3,a->value);
      }
     b =  b->next;
    }
    b = list2->head;
   a =  a->next;
  }

  /*  int * valuesB = malloc(20);
  int k = 0;

  while(b!=NULL){
    valuesB[k] = b->value;
    k++;
    b = b->next;
  }

  int * equal = malloc(20);
  int n = 0;
  int l = i-1;
  int m = k-1;
  for( ;l>=0;l--){
    for( ;m>=0;m--){
      if(valuesA[l] == valuesB[m]){
	equal[n] = valuesA[l];
	n++;
      }
    }
    }

  int j = n-1;
  for( ;j>=0;j--){
    llist_add(list3,equal[j]);
    }*/

  
}
